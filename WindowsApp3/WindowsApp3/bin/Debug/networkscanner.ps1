$outfile = "$pwd\network_vuln.csv"
Remove-Item nmapoutput* -Force
Remove-Item $outfile -Force

$unique=0
$count = 0

$env:HostIP = (
    Get-NetIPConfiguration |
    Where-Object {
        $_.IPv4DefaultGateway -ne $null -and
        $_.NetAdapter.Status -ne "Disconnected"
    }
).IPv4Address.IPAddress

Write-Host $env:HostIP

nmap -sV $env:HostIP -oA nmapoutput
[xml]$xmlDocument = Get-Content -Path $pwd\nmapoutput.xml
remove-item network_vuln.csv



$appfound = 0
$value=Get-Content $pwd\default\net.txt
$port= $xmlDocument.nmaprun.host.ports.port.count
Write-Host `n
while($count -ne $port){

    $name = [string]$xmlDocument.nmaprun.host.ports.port.service.name[$count]
    $service = [string]$xmlDocument.nmaprun.host.ports.port.service[$count].product
    $version = [string]$xmlDocument.nmaprun.host.ports.port.service[$count].version

    if ($service.Length -eq 0 ){
        $service = $name
     #   write-host $service
    }else {
     #   write-host $service
    }

    if ($version.Length -eq 0 ){

    }else{ 
      #  write-host $version
    }



   
   $check = $service +" "+ $version
   $check = $check -replace ' ','+'
   $check = $check -replace "-",'+'
   Write-Host $check

   $url = "https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=$check"
   $HTML = Invoke-WebRequest -Uri $url
   $output = $HTML.Links | ForEach-Object -MemberName innertext | Select-String "CVE-"
   

   foreach ($_ in $output) {
   if ($appfound -eq $value){break}
   #Write-Host $appfound

            #writing out each member of the object as a string that can be utilised by PS
            $CVE = $_

            #utilising the previous CVE, to generate new web pages, within which the comment or text is scraped from. there is some data validation here aswell, removing characters that would casue issues.
            $html2 = Invoke-WebRequest -Uri "https://nvd.nist.gov/vuln/search/results?form_type=Basic&results_type=overview&query=$CVE" 
            $output2 = $html2.ParsedHtml.all.tags("td") | ForEach-Object -MemberName innertext | Select-Object -First 1
            $output2 = $output2 -replace ',' + ' '
            #this is one of the more tedious aspects of the code and took awhile to figure out, this is spilitting the comment data from the publish date and CVE risk values,
            #this resulted in a stray double quotation mark which had to be resolved further down the line. Could not trim the end for some strange reason as it was being viewed asa new line.
            $output2 = $output2 -split "Published:" | Select-Object -First 1

            #web scraping the Risk value from a different web page that was easier to scrap data from, simply less manipulation of data had to occur, which increases performance. 
            $html3 = Invoke-WebRequest -Uri "https://nvd.nist.gov/vuln/detail/$CVE"
            $output3 = $html3.ParsedHtml.getElementById("Cvss3NistCalculatorAnchor") | ForEach-Object -MemberName innertext

         
            #a simple if statement to determine if a risk value has been found or not, if not it simply places undetermined in its place.
            if ($output3.length -eq 0 )  {$output3 = "Undetermined"}

            if ($version.Length -eq 0) { $version = "Not Specified"}


        
          
            $appfound++
            [pscustomobject]@{
                            unique_value = $unique++
                            App_Name =  $service
                            App_Version =$version
                            CVE = $CVE
                            Risk = $output3
                            Comment = $output2

                            } | export-csv -NoTypeInformation -Path $outfile -Append
                            

                            }





    $appfound = 0
    $count++



}
$i = 1
Get-Content $outfile | Where-Object { $i % 2 -eq 0; $i++ } | Add-Content "network_vuln_clean.csv"
Remove-Item $outfile -Force
rename-item "network_vuln_clean.csv" -newname "network_vuln.csv"